#!/usr/bin/env python3
import sys
import re
import os

def extract_and_write_lua(map_file_path, output_lua_path):
    """
    Parses a GBA .map file to find specific symbol addresses and writes them
    into a Lua file as a table.
    """
    symbols_to_find = {
        "gPoryLiveScriptInitialized": None,
        "gPoryLiveOverrides": None,
        "gPoryLiveScriptBuffer": None,
    }
    symbols_found_count = 0
    found_addresses = {}

    # Regex to find lines like: .sbss.<symbol_name> 0x<address> ... <object_file>
    # or more simply: 0x<address> <symbol_name> (often found in the cross-reference section or symbol table listing)
    # This regex looks for the address first, then the symbol name anchored by word boundaries.
    symbol_regex_pattern = r"^\s*(0x[0-9a-fA-F]+)\s+.*\b({})\b".format('|'.join(symbols_to_find.keys()))
    symbol_regex = re.compile(symbol_regex_pattern)

    # Simpler direct match regex (address followed by symbol name)
    direct_match_regex = re.compile(r"^\s*(0x[0-9a-fA-F]+)\s+({})\s*$".format('|'.join(symbols_to_find.keys())))


    try:
        with open(map_file_path, 'r') as f:
            for line in f:
                line = line.strip()
                match = direct_match_regex.search(line)
                if not match:
                    match = symbol_regex.search(line) # Fallback to broader search

                if match:
                    address = match.group(1)
                    # Find which symbol matched
                    symbol = next((s for s in symbols_to_find if s == match.group(2)), None)

                    if symbol and symbol not in found_addresses:
                         found_addresses[symbol] = address
                         symbols_found_count += 1
                         # Optimization: stop if all symbols are found
                         if symbols_found_count == len(symbols_to_find):
                             break

    except FileNotFoundError:
        print(f"Error: Map file not found at {map_file_path}", file=sys.stderr)
        return False # Indicate failure
    except Exception as e:
        print(f"Error processing map file '{map_file_path}': {e}", file=sys.stderr)
        return False # Indicate failure

    # Ensure the output directory exists
    output_dir = os.path.dirname(output_lua_path)
    if output_dir:
        os.makedirs(output_dir, exist_ok=True)

    # Generate Lua file content
    lua_content = f"-- Auto-generated by {os.path.basename(__file__)} from {os.path.basename(map_file_path)}\n"
    lua_content += "-- DO NOT EDIT THIS FILE MANUALLY!\n"
    lua_content += "return {\n"
    all_found = True
    for symbol in sorted(symbols_to_find.keys()): # Sort for consistent output
        address = found_addresses.get(symbol)
        if address:
            lua_content += f'  {symbol} = {address},\n'
        else:
            print(f"Warning: Symbol '{symbol}' not found in {map_file_path}.", file=sys.stderr)
            lua_content += f'  -- {symbol} = nil, -- Symbol not found in map file\n'
            all_found = False
    lua_content += "}\n"

    # Write to output Lua file
    try:
        with open(output_lua_path, 'w') as f:
            f.write(lua_content)
        # print(f"Successfully wrote addresses to {output_lua_path}") # Reduce verbosity
    except Exception as e:
        print(f"Error writing Lua address file '{output_lua_path}': {e}", file=sys.stderr)
        return False # Indicate failure

    return all_found # Return True if all symbols were found, False otherwise


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"Usage: python {os.path.basename(__file__)} <map_file_path> <output_lua_path>", file=sys.stderr)
        sys.exit(1)

    map_file = sys.argv[1]
    output_lua = sys.argv[2]

    # Create a porylive_config.lua file the build directory
    project_dir = os.path.dirname(map_file)
    config_file = os.path.join(project_dir, "build", "porylive_config.lua")
    build_dir = os.path.dirname(output_lua)

    with open(config_file, "w") as f:
        f.write(f"-- Auto-generated by {os.path.basename(__file__)}\n")
        f.write(f"-- DO NOT EDIT THIS FILE MANUALLY!\n")
        f.write( "return {\n")
        f.write(f"  current_build_dir = '{build_dir}',\n")
        f.write( "}\n")

    if not extract_and_write_lua(map_file, output_lua):
        print(f"Error: Not all required symbols were found in {map_file}. Check {output_lua}.", file=sys.stderr)
        sys.exit(1)
    sys.exit(0) # Ensure exit code 0 on success or warning
